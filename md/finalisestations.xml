<?xml version='1.0' encoding='utf-8'?>
<diff>
  <add sel="/mdscript/cues/cue[@name='God_DefaultFinaliseFactory']/actions/set_value[@name='md.$NumBuilds']" pos="before">
    <set_value name="$DeadAirEco"/>
  </add>
  <add sel="/mdscript/cues/cue[@name='God_DefaultFinaliseFactory']/actions/do_if[@value='$Station.owner != faction.xenon'][2]">
    <include_actions ref="DAIncreaseStartingStorage"/>
  </add>
  <add sel="/mdscript/cues/cue[@name='God_DefaultFinaliseFactory']/actions/set_value[@name='$dbg_str']" pos="before">
    <include_actions ref="DAImproveStationLayouts"/>
  </add>
  <replace sel="/mdscript/cues/cue[@name='God_DefaultFinaliseFactory']/actions/do_if[@value='$Conn_PlannedConnectors.count']/create_construction_sequence[@station='$Station'][@macros='$NewPlannedModules']">
    <do_if value="true">
      <do_if value="$Station.owner.primaryrace != race.xenon">
        <create_construction_sequence station="$Station" macros="$NewPlannedModules" connectors="$Conn_PlannedConnectors" base="$BaseSequence" constructionbias="10.0"/>
      </do_if>
      <do_else>
        <create_construction_sequence station="$Station" macros="$NewPlannedModules" connectors="$Conn_PlannedConnectors" base="$BaseSequence"/>
      </do_else>
    </do_if>
  </replace>
  <replace sel="/mdscript/cues/cue[@name='God_DefaultFinaliseFactory']/cues/cue[@name='ConstructionSequenceCompleted']/actions/do_if[@value='$ConstructionSequence']/set_build_plot[@object='$Station']/@allowreduction">false</replace>
  <add sel="/mdscript/cues/library[@name='NewStation_GenerateFactory']/actions/do_if[@value='$Station.owner != faction.xenon']">
    <include_actions ref="DAIncreaseStartingStorage"/>
  </add>
  <add sel="/mdscript/cues/library[@name='NewStation_GenerateFactory']/actions/set_value[@name='$dbg_str']" pos="before">
    <include_actions ref="DAImproveStationLayouts"/>
  </add>
  <replace sel="/mdscript/cues/library[@name='NewStation_GenerateFactory']/actions/do_if[@value='$Conn_PlannedConnectors.count']/create_construction_sequence[@station='$Station'][@macros='$NewPlannedModules']">
    <do_if value="true">
      <do_if value="$Station.owner.primaryrace != race.xenon">
        <create_construction_sequence station="$Station" macros="$NewPlannedModules" connectors="$Conn_PlannedConnectors" base="$BaseSequence" constructionbias="10.0"/>
      </do_if>
      <do_else>
        <create_construction_sequence station="$Station" macros="$NewPlannedModules" connectors="$Conn_PlannedConnectors" base="$BaseSequence"/>
      </do_else>
    </do_if>
  </replace>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateHabitation']/actions/do_if[@value='$ShouldCalculateHabitation']/do_if[@value='$NecessaryWorkers'][@min='1']/do_if[@value='$ModuleScoreTable.keys.count'][@min='1']/do_while[@value='$WorkforceRemaining'][@min='0']" pos="before">
    <include_actions ref="md.FinaliseStations.DAImproveHabitation"/>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDocks']/actions/do_if[@value='$NumRequiredDocksMedium + $NumRequiredDocksSmall'][@min='1']/do_else[1]/do_if[@value='$weight gt 66']" pos="before">
    <set_value name="$weight" min="1" max="100" seed="$Station"/>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDocks']/actions/do_if[@value='$NumRequiredDocksMedium + $NumRequiredDocksSmall'][@min='1']/do_if[@value='$ViableDockModules.count gt 0']/do_while[@value='($NumRequiredDocksMedium gt 0.5f) or ($NumRequiredDocksSmall gt 0.5f)']" pos="before">
    <include_actions ref="md.FinaliseStations.DAImproveSMDocks"/>
  </add>
  <replace sel="/mdscript/cues/library[@name='DefaultCalculatePiers']/actions/set_value[@exact='0.55f'][@name='$CapitalTradeRatio']/@exact">0.65f</replace>
  <replace sel="/mdscript/cues/library[@name='DefaultCalculatePiers']/actions/set_value[@exact='1000 - (1000 - $NumRequiredPiers)i'][@name='$NumRequiredPiers']/@exact">[[1000 - (1000 - $NumRequiredPiers)i,1].max,12].min</replace>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDefence']/actions/do_if[@value='$Station.owner != faction.xenon']/do_for_each[@name='$OpposingFaction']" pos="before">
    <set_value name="$DAhighestscore" exact="0"/>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDefence']/actions/do_if[@value='$Station.owner != faction.xenon']/do_for_each[@name='$OpposingFaction']">
    <do_if value="$Score gt $DAhighestscore">
      <set_value name="$DAhighestscore" exact="$Score"/>
    </do_if>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDefence']/actions/do_if[@value='$Station.owner != faction.xenon']">
    <do_if value="true">
      <set_value name="$Def_StationScore" min="($DAhighestscore)LF / 100 - 0.15" max="(($DAhighestscore)LF / 100) + 0.15" seed="$Station"/>
      <set_value name="$Def_StationScore" exact="[$Def_StationScore,0.4LF].max"/>
    </do_if>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDefence']/actions/do_if[@value='$Def_StationScore ge 0 and $Def_StationScore le $LowMaxBoundary']">
    <set_value name="$NumDefenceModules" exact="2"/>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDefence']/actions/do_elseif[@value='$Def_StationScore le $MidMaxBoundary']">
    <set_value name="$NumDefenceModules" min="3" max="4" seed="$Station"/>
  </add>
  <add sel="/mdscript/cues/library[@name='DefaultCalculateDefence']/actions/do_elseif[@value='$Def_StationScore le $HighMaxBoundary']">
    <set_value name="$NumDefenceModules" min="5" max="6"/>
  </add>
  <add sel="/mdscript/cues">
    <library name="DAIncreaseStartingStorage">
      <actions>
        <!-- $DAPlannedCapacity = Container, Liquid, Solid -->
        <set_value name="$DAPlannedCapacity" exact="[0,0,0]"/>
        <!-- $DAPlannedProduction = Production Modules, Production Volume, Consumption Volume -->
        <set_value name="$DAPlannedProduction" exact="[0,0,0]"/>
        <do_all exact="$PlannedModules.count" counter="$ModuleCounter">
          <do_if value="$PlannedModules.{$ModuleCounter}.isclass.storage">
            <do_if value="$PlannedModules.{$ModuleCounter}.cargo.capacity.container" min="1">
              <set_value name="$DAPlannedCapacity.{1}" exact="$PlannedModules.{$ModuleCounter}.cargo.capacity.container" operation="add"/>
            </do_if>
            <do_if value="$PlannedModules.{$ModuleCounter}.cargo.capacity.liquid" min="1">
              <set_value name="$DAPlannedCapacity.{2}" exact="$PlannedModules.{$ModuleCounter}.cargo.capacity.liquid" operation="add"/>
            </do_if>
            <do_if value="$PlannedModules.{$ModuleCounter}.cargo.capacity.solid" min="1">
              <set_value name="$DAPlannedCapacity.{3}" exact="$PlannedModules.{$ModuleCounter}.cargo.capacity.solid" operation="add"/>
            </do_if>
          </do_if>
          <do_if value="$PlannedModules.{$ModuleCounter}.isclass.production">
            <set_value name="$DAPlannedProduction.{1}" exact="1" operation="add"/>
            <set_value name="$DAPlannedProduction.{2}" exact="$PlannedModules.{$ModuleCounter}.productionvolume" operation="add"/>
            <set_value name="$DAPlannedProduction.{3}" exact="$PlannedModules.{$ModuleCounter}.consumptionvolume" operation="add"/>
          </do_if>
        </do_all>
        <get_module_definition macro="$DAPossibleStorageModules" faction="$Station.owner" tags="[tag.storage, tag.module]" set="$ModuleSet" multiple="true"/>
        <set_value name="$DAContainerMods" exact="[]"/>
        <set_value name="$DALiquidMods" exact="[]"/>
        <set_value name="$DASolidMods" exact="[]"/>
        <do_if value="$DAPossibleStorageModules.count" min="1">
          <do_for_each name="$LocMod" in="$DAPossibleStorageModules">
            <do_if value="$LocMod.cargo.capacity.container" min="1">
              <do_if value="not $DAContainerMods.indexof.{$LocMod}">
                <append_to_list name="$DAContainerMods" exact="$LocMod"/>
              </do_if>
            </do_if>
            <do_elseif value="$LocMod.cargo.capacity.liquid" min="1">
              <do_if value="not $DALiquidMods.indexof.{$LocMod}">
                <append_to_list name="$DALiquidMods" exact="$LocMod"/>
              </do_if>
            </do_elseif>
            <do_elseif value="$LocMod.cargo.capacity.solid" min="1">
              <do_if value="not $DASolidMods.indexof.{$LocMod}">
                <append_to_list name="$DASolidMods" exact="$LocMod"/>
              </do_if>
            </do_elseif>
          </do_for_each>
        </do_if>
        <remove_value name="$PossibleStorageModules"/>
        <!-- Container -->
        <do_if value="($DAPlannedCapacity.{1} gt 0) and ($DAContainerMods.count gt 0)">
          <sort_list list="$DAContainerMods" sortbyvalue="loop.element.cargo.capacity.container" sortdescending="true"/>
          <!-- Container Only = 10 Hours Production storage, 2 Hours Resource storage -->
          <set_value name="$DADesiredStorage" exact="($DAPlannedProduction.{2} * 10) + ($DAPlannedProduction.{3} * 2)"/>
          <do_if value="(($DAPlannedCapacity.{2} gt 0) and ($DALiquidMods.count gt 0)) or (($DAPlannedCapacity.{3} gt 0) and ($DASolidMods.count gt 0))">
            <!-- Not Container Only = 10 Hours Production storage, 2 Hour Resource storage * 0.33 -->
            <set_value name="$DADesiredStorage" exact="($DAPlannedProduction.{2} * 10) + (($DAPlannedProduction.{3} * 2 * 0.33)L)"/>
          </do_if>
          <do_if value="$DAPlannedCapacity.{1} lt $DADesiredStorage">
            <debug_text text="'MOD: DAEco -- DAIncreaseStartingStorage -- Station: %s(%s) in (%s) -- Planned Container: %s -- Desired Container: %s'.[@$Station.knownname,@$Station.idcode,@$Station.sector.knownname,$DAPlannedCapacity.{1},$DADesiredStorage]" context="false" filter="scripts" chance="0"/>
            <do_for_each name="$LocMod" in="$DAContainerMods" counter="$C">
              <set_value name="$DACapWanted" exact="$DADesiredStorage - $DAPlannedCapacity.{1}"/>
              <do_if value="$DACapWanted" min="1">
                <do_if value="($C != $DAContainerMods.count)">
                  <set_value name="$LocWanted" exact="$DACapWanted / $LocMod.cargo.capacity.container"/>
                  <do_if value="($LocWanted * $LocMod.cargo.capacity.container) lt $DACapWanted">
                    <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.container) + 1"/>
                  </do_if>
                  <do_if value="$LocWanted" min="1">
                    <set_value name="$AddModules.{$LocMod}" exact="$LocWanted" operation="add"/>
                  </do_if>
                  <remove_value name="$LocWanted"/>
                </do_if>
                <do_elseif value="($C == $DAContainerMods.count)">
                  <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.container)"/>
                  <do_if value="($LocWanted * $LocMod.cargo.capacity.container) lt $DACapWanted">
                    <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.container) + 1"/>
                  </do_if>
                  <do_if value="$LocWanted" min="1">
                    <set_value name="$AddModules.{$LocMod}" exact="$LocWanted" operation="add"/>
                  </do_if>
                  <remove_value name="$LocWanted"/>
                </do_elseif>
              </do_if>
              <do_else>
                <break/>
              </do_else>
            </do_for_each>
            <remove_value name="$DACapWanted"/>
          </do_if>
          <remove_value name="$DADesiredStorage"/>
        </do_if>
        <remove_value name="$DAContainerMods"/>
        <!-- Liquid -->
        <do_if value="($DAPlannedCapacity.{2} gt 0) and ($DALiquidMods.count gt 0)">
          <sort_list list="$DALiquidMods" sortbyvalue="loop.element.cargo.capacity.liquid" sortdescending="true"/>
          <!-- Container already handled above -->
          <!-- Not Container Only = 2 Hour Resource storage * 0.66 -->
          <set_value name="$DADesiredStorage" exact="(($DAPlannedProduction.{3} * 2 * 0.66)L)"/>
          <do_if value="$DAPlannedCapacity.{2} lt $DADesiredStorage">
            <debug_text text="'MOD: DAEco -- DAIncreaseStartingStorage -- Station: %s(%s) in (%s) -- Planned Liquid: %s -- Desired Liquid: %s'.[@$Station.knownname,@$Station.idcode,@$Station.sector.knownname,$DAPlannedCapacity.{2},$DADesiredStorage]" context="false" filter="scripts" chance="0"/>
            <do_for_each name="$LocMod" in="$DALiquidMods" counter="$C">
              <set_value name="$DACapWanted" exact="$DADesiredStorage - $DAPlannedCapacity.{2}"/>
              <do_if value="$DACapWanted" min="1">
                <do_if value="($C != $DALiquidMods.count)">
                  <set_value name="$LocWanted" exact="$DACapWanted / $LocMod.cargo.capacity.liquid"/>
                  <do_if value="($LocWanted * $LocMod.cargo.capacity.liquid) lt $DACapWanted">
                    <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.liquid) + 1"/>
                  </do_if>
                  <do_if value="$LocWanted" min="1">
                    <set_value name="$AddModules.{$LocMod}" exact="$LocWanted" operation="add"/>
                  </do_if>
                  <remove_value name="$LocWanted"/>
                </do_if>
                <do_elseif value="($C == $DALiquidMods.count)">
                  <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.liquid)"/>
                  <do_if value="($LocWanted * $LocMod.cargo.capacity.liquid) lt $DACapWanted">
                    <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.liquid) + 1"/>
                  </do_if>
                  <do_if value="$LocWanted" min="1">
                    <set_value name="$AddModules.{$LocMod}" exact="$LocWanted" operation="add"/>
                  </do_if>
                  <remove_value name="$LocWanted"/>
                </do_elseif>
              </do_if>
              <do_else>
                <break/>
              </do_else>
            </do_for_each>
            <remove_value name="$DACapWanted"/>
          </do_if>
          <remove_value name="$DADesiredStorage"/>
        </do_if>
        <remove_value name="$DALiquidMods"/>
        <!-- Solid -->
        <do_if value="($DAPlannedCapacity.{3} gt 0) and ($DASolidMods.count gt 0)">
          <sort_list list="$DASolidMods" sortbyvalue="loop.element.cargo.capacity.solid" sortdescending="true"/>
          <!-- Container already handled above -->
          <!-- Not Container Only = 2 Hour Resource storage * 0.66 -->
          <set_value name="$DADesiredStorage" exact="(($DAPlannedProduction.{3} * 2 * 0.66)L)"/>
          <do_if value="$DAPlannedCapacity.{3} lt $DADesiredStorage">
            <debug_text text="'MOD: DAEco -- DAIncreaseStartingStorage -- Station: %s(%s) in (%s) -- Planned Solid: %s -- Desired Solid: %s'.[@$Station.knownname,@$Station.idcode,@$Station.sector.knownname,$DAPlannedCapacity.{3},$DADesiredStorage]" context="false" filter="scripts" chance="0"/>
            <do_for_each name="$LocMod" in="$DASolidMods" counter="$C">
              <set_value name="$DACapWanted" exact="$DADesiredStorage - $DAPlannedCapacity.{3}"/>
              <do_if value="$DACapWanted" min="1">
                <do_if value="($C != $DASolidMods.count)">
                  <set_value name="$LocWanted" exact="$DACapWanted / $LocMod.cargo.capacity.solid"/>
                  <do_if value="($LocWanted * $LocMod.cargo.capacity.solid) lt $DACapWanted">
                    <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.solid) + 1"/>
                  </do_if>
                  <do_if value="$LocWanted" min="1">
                    <set_value name="$AddModules.{$LocMod}" exact="$LocWanted" operation="add"/>
                  </do_if>
                  <remove_value name="$LocWanted"/>
                </do_if>
                <do_elseif value="($C == $DASolidMods.count)">
                  <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.solid)"/>
                  <do_if value="($LocWanted * $LocMod.cargo.capacity.solid) lt $DACapWanted">
                    <set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.solid) + 1"/>
                  </do_if>
                  <do_if value="$LocWanted" min="1">
                    <set_value name="$AddModules.{$LocMod}" exact="$LocWanted" operation="add"/>
                  </do_if>
                  <remove_value name="$LocWanted"/>
                </do_elseif>
              </do_if>
              <do_else>
                <break/>
              </do_else>
            </do_for_each>
            <remove_value name="$DACapWanted"/>
          </do_if>
          <remove_value name="$DADesiredStorage"/>
        </do_if>
        <remove_value name="$DASolidMods"/>
        <remove_value name="$DAPlannedCapacity"/>
        <remove_value name="$DAPlannedProduction"/>
      </actions>
    </library>
  </add>
  <add sel="/mdscript/cues">
    <library name="DAImproveStationLayouts">
      <actions>
        <do_if value="$PlannedModules.count" min="1">
          <set_value name="$ProductionModules" exact="0"/>
          <set_value name="$HabitationModules" exact="0"/>
          <do_all exact="$PlannedModules.count" counter="$P">
            <do_if value="$PlannedModules.{$P}.isclass.production">
              <set_value name="$ProductionModules" exact="1" operation="add"/>
            </do_if>
            <do_elseif value="$PlannedModules.{$P}.isclass.habitation">
              <set_value name="$HabitationModules" exact="1" operation="add"/>
            </do_elseif>
          </do_all>
          <do_if value="$ProductionModules + $HabitationModules ge 10">
            <do_if value="$Station.owner.primaryrace == race.argon">
              <set_value name="$ProductionConnectors" exact="[macro.struct_arg_base_02_macro,macro.struct_arg_cross_01_macro]"/>
              <set_value name="$ProductionConChance" exact="50"/>
              <set_value name="$HabitationConnectors" exact="[macro.struct_arg_cross_01_macro]"/>
              <set_value name="$HabitationConChance" exact="33"/>
            </do_if>
            <do_elseif value="$Station.owner.primaryrace == race.paranid">
              <set_value name="$ProductionConnectors" exact="[macro.struct_par_base_02_macro,macro.struct_par_cross_02_macro]"/>
              <set_value name="$ProductionConChance" exact="50"/>
              <set_value name="$HabitationConnectors" exact="[macro.struct_par_base_02_macro,macro.struct_par_cross_02_macro]"/>
              <set_value name="$HabitationConChance" exact="33"/>
            </do_elseif>
            <do_elseif value="$Station.owner.primaryrace == race.teladi">
              <set_value name="$ProductionConnectors" exact="[macro.struct_tel_base_02_macro,macro.struct_tel_cross_01_macro]"/>
              <set_value name="$ProductionConChance" exact="50"/>
              <set_value name="$HabitationConnectors" exact="[macro.struct_tel_base_02_macro,macro.struct_tel_cross_01_macro]"/>
              <set_value name="$HabitationConChance" exact="100"/>
            </do_elseif>
            <do_elseif value="faction.split? and ($Station.owner.primaryrace == race.split)">
              <set_value name="$ProductionConnectors" exact="[macro.struct_spl_base_03_macro]"/>
              <set_value name="$ProductionConChance" exact="25"/>
              <set_value name="$HabitationConnectors" exact="[macro.struct_spl_base_03_macro,macro.struct_spl_cross_01_macro]"/>
              <set_value name="$HabitationConChance" exact="40"/>
            </do_elseif>
            <do_elseif value="faction.terran? and ($Station.owner.primaryrace == race.terran)">
              <set_value name="$ProductionConnectors" exact="[macro.struct_ter_base_03_macro]"/>
              <set_value name="$ProductionConChance" exact="20"/>
              <set_value name="$HabitationConnectors" exact="[macro.struct_ter_cross_01_macro]"/>
              <set_value name="$HabitationConChance" exact="33"/>
            </do_elseif>
            <do_elseif value="faction.boron? and ($Station.owner.primaryrace == race.boron)">
              <set_value name="$ProductionConnectors" exact="[macro.struct_bor_base_04_macro]"/>
              <set_value name="$ProductionConChance" exact="20"/>
              <set_value name="$HabitationConnectors" exact="[macro.struct_bor_cross_01_macro]"/>
              <set_value name="$HabitationConChance" exact="33"/>
            </do_elseif>
            <do_if value="($NewPlannedModules.count ge 1) and $ProductionConnectors? and $HabitationConnectors?">
              <set_value name="$DAPlannedModules" exact="[]"/>
              <do_all exact="$NewPlannedModules.count" counter="$B">
                <do_if value="$NewPlannedModules.{$B}.isclass.production">
                  <do_for_each name="$ProdConnector" in="$ProductionConnectors" chance="$ProductionConChance">
                    <append_to_list name="$DAPlannedModules" exact="$ProdConnector"/>
                  </do_for_each>
                  <append_to_list name="$DAPlannedModules" exact="$NewPlannedModules.{$B}"/>
                </do_if>
                <do_elseif value="$NewPlannedModules.{$B}.isclass.habitation">
                  <do_for_each name="$HabConnector" in="$HabitationConnectors" chance="$HabitationConChance">
                    <append_to_list name="$DAPlannedModules" exact="$HabConnector"/>
                  </do_for_each>
                  <append_to_list name="$DAPlannedModules" exact="$NewPlannedModules.{$B}"/>
                </do_elseif>
                <do_else>
                  <append_to_list name="$DAPlannedModules" exact="$NewPlannedModules.{$B}"/>
                </do_else>
              </do_all>
              <do_if value="$DAPlannedModules.count gt $NewPlannedModules.count">
                <set_value name="$NewPlannedModules" exact="$DAPlannedModules"/>
              </do_if>
              <remove_value name="$DAPlannedModules"/>
            </do_if>
            <remove_value name="$ProductionConnectors"/>
            <remove_value name="$HabitationConnectors"/>
          </do_if>
          <remove_value name="$ProductionModules"/>
          <remove_value name="$HabitationModules"/>
        </do_if>
      </actions>
    </library>
  </add>
  <add sel="/mdscript/cues">
    <library name="DAImproveHabitation">
      <actions>
        <get_module_definition macro="$ViableHabModules" faction="$Station.owner" tags="[tag.habitation, tag.module]" set="$ModuleSet" multiple="true"/>
        <do_if value="$ViableHabModules.count gt 1">
          <sort_list list="$ViableHabModules" sortbyvalue="loop.element.workforce.capacity" sortdescending="true"/>
        </do_if>
        <do_for_each name="$LocHab" in="$ViableHabModules">
          <do_if value="($WorkforceRemaining gt 0) and $LocHab">
            <set_value name="$LocAmountToOrder" exact="[$WorkforceRemaining / $LocHab.workforce.capacity,1].max"/>
            <do_if value="(($LocAmountToOrder * $LocHab.workforce.capacity) lt $WorkforceRemaining) and ((($LocAmountToOrder + 1) * $LocHab.workforce.capacity) ge $WorkforceRemaining)">
              <set_value name="$LocAmountToOrder" exact="1" operation="add"/>
            </do_if>
            <do_all exact="$LocAmountToOrder">
              <set_value name="$HabitationModulesToBuild.{$LocHab}" exact="1" operation="add"/>
              <set_value name="$WorkforceRemaining" exact="$LocHab.workforce.capacity" operation="subtract"/>
              <set_value name="$dbg_str" exact="$dbg_str + 'Adding ' + $LocHab + '. Workforce remaining now at ' + $WorkforceRemaining + '\n'"/>
            </do_all>
            <remove_value name="this.$LocAmountToOrder"/>
          </do_if>
          <do_elseif value="($WorkforceRemaining le 0) and (not $HabitationModulesToBuild.{$LocHab}?) and $LocHab">
            <set_value name="$HabitationModulesToBuild.{$LocHab}" exact="1" operation="add"/>
            <set_value name="$WorkforceRemaining" exact="$LocHab.workforce.capacity" operation="subtract"/>
            <set_value name="$dbg_str" exact="$dbg_str + 'Adding ' + $LocHab + '. Workforce remaining now at ' + $WorkforceRemaining + '\n'"/>
          </do_elseif>
          <do_elseif value="$WorkforceRemaining le 0">
            <break/>
          </do_elseif>
        </do_for_each>
        <remove_value name="$ViableHabModules"/>
      </actions>
    </library>
  </add>
  <add sel="/mdscript/cues">
    <library name="DAImproveSMDocks">
      <actions>
        <set_value name="$MedDocks" exact="[]"/>
        <set_value name="$SmallDocks" exact="[]"/>
        <do_for_each name="$Dock" in="$ViableDockModules">
          <do_if value="$Dock.numdocks.{tag.dock_m}" min="1">
            <append_to_list name="$MedDocks" exact="$Dock"/>
          </do_if>
          <do_if value="$Dock.numdocks.{tag.dock_s}" min="1">
            <append_to_list name="$SmallDocks" exact="$Dock"/>
          </do_if>
        </do_for_each>
        <do_if value="$MedDocks.count and ($NumRequiredDocksMedium gt 0)">
          <sort_list list="$MedDocks" sortbyvalue="loop.element.numdocks.{tag.dock_m}" sortdescending="true"/>
          <do_for_each name="$Dock" in="$MedDocks">
            <do_if value="($NumRequiredDocksMedium gt 0) and ($Dock.numdocks.{tag.dock_m} gt 0)">
              <set_value name="$DAOrderAmount" exact="[$NumRequiredDocksMedium / $Dock.numdocks.{tag.dock_m},1].max"/>
              <do_all exact="$DAOrderAmount">
                <set_value name="$NumDocksAddedMedium" exact="$Dock.numdocks.{tag.dock_m}" operation="add"/>
                <set_value name="$NumRequiredDocksMedium" exact="$Dock.numdocks.{tag.dock_m}" operation="subtract"/>
                <set_value name="$AddModules.{$Dock}" operation="add"/>
                <do_if value="$Dock.numdocks.{tag.dock_s} gt 0">
                  <set_value name="$NumDocksAddedSmall" exact="$Dock.numdocks.{tag.dock_s}" operation="add"/>
                  <set_value name="$NumRequiredDocksSmall" exact="$Dock.numdocks.{tag.dock_s}" operation="subtract"/>
                </do_if>
              </do_all>
              <remove_value name="$DAOrderAmount"/>
            </do_if>
            <do_else>
              <break/>
            </do_else>
          </do_for_each>
        </do_if>
        <do_if value="$SmallDocks.count and ($NumRequiredDocksSmall gt 0)">
          <sort_list list="$SmallDocks" sortbyvalue="loop.element.numdocks.{tag.dock_s}" sortdescending="true"/>
          <do_for_each name="$Dock" in="$SmallDocks">
            <do_if value="($NumRequiredDocksSmall gt 0) and ($Dock.numdocks.{tag.dock_s} gt 0)">
              <set_value name="$DAOrderAmount" exact="[$NumRequiredDocksSmall / $Dock.numdocks.{tag.dock_s},1].max"/>
              <do_all exact="$DAOrderAmount">
                <set_value name="$NumDocksAddedSmall" exact="$Dock.numdocks.{tag.dock_s}" operation="add"/>
                <set_value name="$NumRequiredDocksSmall" exact="$Dock.numdocks.{tag.dock_s}" operation="subtract"/>
                <set_value name="$AddModules.{$Dock}" operation="add"/>
                <do_if value="$Dock.numdocks.{tag.dock_m} gt 0">
                  <set_value name="$NumDocksAddedMedium" exact="$Dock.numdocks.{tag.dock_m}" operation="add"/>
                  <set_value name="$NumRequiredDocksMedium" exact="$Dock.numdocks.{tag.dock_m}" operation="subtract"/>
                </do_if>
              </do_all>
              <remove_value name="$DAOrderAmount"/>
            </do_if>
            <do_else>
              <break/>
            </do_else>
          </do_for_each>
        </do_if>
        <remove_value name="$MedDocks"/>
        <remove_value name="$SmallDocks"/>
      </actions>
    </library>
  </add>
</diff>
